# .github/workflows/pipeline.yml
name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  security-pipeline:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    steps:
      # STAGE 1.1: Checkout code
      - name: Checkout code
        id: checkout
        uses: actions/checkout@08eba0b27e820071cde6df949e0beb9ba4906955
        with:
          fetch-depth: 0 # Required for Gitleaks to scan full history

      # STAGE 1.2: Set up Python environment
      - name: Set up Python
        id: setup-python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: '3.9'

      # STAGE 1.3: Install dependencies
      - name: Install Python dependencies
        id: install-deps
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt
          pip install bandit pytest flake8

      # STAGE 2.1: Run Linting
      - name: Run Linting with Flake8
        id: linting
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # STAGE 2.2: Run Unit Tests
      - name: Run Unit Tests
        id: unit-tests
        run: |
          pytest tests/

      # STAGE 3.1: Static Code Analysis (SAST) with Bandit
      - name: Create results directory for Bandit
        id: create-bandit-results-dir
        run: mkdir -p results

      - name: Run Bandit SAST Scan
        id: bandit-sast
        run: |
          bandit -c security-tools/bandit-config.yml -r app/ -f json -o results/bandit-report.json --severity-level high

      # STAGE 3.2: Dependency Scanning (SCA) with Snyk
      - name: Install Snyk CLI
        id: install-snyk
        run: |
          npm install -g snyk
          snyk --version

      - name: Run Snyk SCA Scan
        id: snyk-sca
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          snyk test --file=app/requirements.txt --severity-threshold=high --json-file-output=results/snyk-report.json || true
          # Check if vulnerabilities were found
          if snyk test --file=app/requirements.txt --severity-threshold=high; then
            echo "‚úÖ No high-severity vulnerabilities found"
          else
            echo "‚ùå High-severity vulnerabilities detected"
            exit 1
          fi

      # STAGE 3.3: Secret Detection with Gitleaks
      - name: Run Gitleaks Secret Scan
        id: gitleaks-secrets
        uses: gitleaks/gitleaks-action@ff98106e4c7b2bc287b24eaf42907196329070c7
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          config-path: .gitleaks.toml  # Has an allowklist with the fake AWS credential
      
      # Save Gitleaks report manually
      - name: Save Gitleaks Report
        id: save-gitleaks-report
        if: failure() && steps.gitleaks-secrets.outcome == 'failure'
        run: |
          # The gitleaks-action outputs to gitleaks-report.json by default
          if [ -f gitleaks-report.json ]; then
            mkdir -p results
            cp gitleaks-report.json results/gitleaks-report.json
            echo "Gitleaks report saved to results/gitleaks-report.json"
            
            # Display summary
            echo "### Gitleaks Findings ###"
            cat gitleaks-report.json | jq -r '.[] | "Secret: \(.Description)\nFile: \(.File)\nLine: \(.StartLine)"'
          else
            echo "No gitleaks report found"
          fi

      # STAGE 4.1: Set Up Docker Buildx
      - name: Set up Docker Buildx
        id: setup-buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435
      
      # STAGE 4.2: Build Docker Image
      - name: Build Docker image
        id: build-image
        uses: docker/build-push-action@ca052bb54ab0790a636c9b5f226502c73d547a25
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ci-cd-secured-pipeline:latest

      # STAGE 5.1: Container Security Scan with Trivy
      - name: Run Trivy Vulnerability Scanner
        id: trivy-scan
        uses: aquasecurity/trivy-action@b6643a29fecd7f34b3597bc6acb0a98b03d33ff8
        with:
          image-ref: '${{ secrets.DOCKERHUB_USERNAME }}/ci-cd-secured-pipeline:latest'
          format: 'json'
          output: 'results/trivy-report.json'
          severity: 'CRITICAL'  
          exit-code: '1'
          ignore-unfixed: true  # Ignore vulnerabilities without available fixes
          
      # Generate human-readable report even if scan fails.
      - name: Generate Trivy Summary
        if: always()
        run: |
          if [ -f results/trivy-report.json ]; then
            echo "### Trivy Scan Results ###"
            cat results/trivy-report.json | jq -r '.Results[] | select(.Vulnerabilities != null) | .Vulnerabilities[] | select(.Severity == "HIGH" or .Severity == "CRITICAL") | "\(.Severity): \(.VulnerabilityID) in \(.PkgName) \(.InstalledVersion)"'
          fi
          
      # STAGE 5.2: DAST Placeholder
      - name: DAST Placeholder
        id: dast-placeholder
        run: |
          echo "DAST scan would run here. This is a placeholder."
          echo "For a real implementation, you would use a tool like OWASP ZAP or a commercial DAST scanner."

      # STAGE 6.1: Upload Scan Reports
      - name: Upload Security Scan Reports
        id: upload-reports
        if: always()
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: security-reports
          path: results/

      # STAGE 6.2: Authenticate To Docker Hub (Conditional)
      - name: Login to Docker Hub
        id: docker-login
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # STAGE 6.3: Push to Docker Hub (Conditional)
      - name: Push to Docker Hub
        id: docker-push
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: docker/build-push-action@ca052bb54ab0790a636c9b5f226502c73d547a25
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/ci-cd-secured-pipeline:latest
        
      # STAGE 6.4: Deploy to Google Cloud Run
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Deploy to Cloud Run
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          gcloud run deploy secure-cicd-app \
            --image docker.io/${{ secrets.DOCKERHUB_USERNAME }}/ci-cd-secured-pipeline:${{ github.sha }} \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --port 5000 \
            --project ${{ secrets.GCP_PROJECT_ID }}

      - name: Get Service URL
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          SERVICE_URL=$(gcloud run services describe secure-cicd-app \
            --platform managed \
            --region us-central1 \
            --format 'value(status.url)' \
            --project ${{ secrets.GCP_PROJECT_ID }})
          echo "### üöÄ Deployment Complete! ###"
          echo "App URL: $SERVICE_URL"
          echo "Test: curl $SERVICE_URL/health"