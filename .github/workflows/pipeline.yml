name: DevSecOps CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch: # Allows manual triggering

# Define environment variables for the pipeline
env:
  IMAGE_NAME: ${{ github.repository_owner }}/${{ github.event.repository.name }}

jobs:
  # Job 1: Run unit tests
  unit-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r app/requirements.txt

      - name: Run tests
        run: python -m unittest discover tests

  # Job 2: Scan for hardcoded secrets
  secret-scan:
    runs-on: ubuntu-latest
    needs: [unit-tests] # Depends on unit tests passing
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for Gitleaks

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          # Fail the build if secrets are found.
          # Report will be uploaded as an artifact.
          fail: true
          report_format: json
          report_path: gitleaks-report.json

      - name: Upload Gitleaks report
        uses: actions/upload-artifact@v4
        with:
          name: gitleaks-report
          path: gitleaks-report.json

  # Job 3: Static Application Security Testing (SAST)
  sast-scan:
    runs-on: ubuntu-latest
    needs: [unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Bandit
        run: pip install bandit

      - name: Run Bandit Scan
        # -r: recursive, -f: format, -o: output file
        # --exit-with-error: exit with non-zero status on issues
        # -c: config file (optional)
        run: bandit -r app/ -f json -o bandit-report.json --exit-with-error -s B101,B602,B403

      - name: Upload Bandit report
        uses: actions/upload-artifact@v4
        with:
          name: bandit-report
          path: bandit-report.json

  # Job 4: Software Composition Analysis (SCA) - Dependency Scan
  sca-scan:
    runs-on: ubuntu-latest
    needs: [unit-tests]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run pip-audit
        uses: pypa/pip-audit-action@v1
        with:
          # Fail on any vulnerability found
          fail-on-vulnerability: true
          inputs: |
            app/requirements.txt
          output-format: "json"
          # The action automatically creates pip-audit-report.json

      - name: Upload pip-audit report
        uses: actions/upload-artifact@v4
        with:
          name: pip-audit-report
          path: pip-audit-report.json

  # Job 5: Build Docker image and scan it for vulnerabilities
  build-and-scan-image:
    runs-on: ubuntu-latest
    needs: [sast-scan, sca-scan, secret-scan] # Depends on all previous scans
    permissions:
      contents: read
      packages: write # Required to push to GitHub Container Registry
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false # Do not push yet, just build and load to local Docker
          load: true
          tags: local/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.20.0
        with:
          image-ref: 'local/${{ env.IMAGE_NAME }}:${{ github.sha }}'
          format: 'json'
          output: 'trivy-results.json'
          # Fail the build if any HIGH or CRITICAL vulnerabilities are found
          severity: 'HIGH,CRITICAL'
          exit-code: '1'

      - name: Upload Trivy scan results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-results.json

  # Job 6: Push image to registry (only runs if all previous jobs succeed)
  deploy:
    runs-on: ubuntu-latest
    needs: [build-and-scan-image]
    # This job only runs on the main branch, not on pull requests
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
